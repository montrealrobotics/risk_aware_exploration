# @package _global_

# python train.py -m hparams_search=local_optuna experiment=example
defaults:
  - override /hydra/sweeper: optuna

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: ???

    # 'minimize' or 'maximize' the objective
    direction: ${metric.minimize_maximize}

    # total number of runs that will be executed - i.e. number of jobs
    n_trials: ???

    # choose Optuna hyperparameter sampler
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    # TODO: optuna.samplers.RandomSampler still receives the TPESampler config which raises and error
    # TODO: Use TPESampler with a high n_startup_trials for the same effect
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: ${seed}
      n_startup_trials: ${hydra.sweeper.n_trials} # number of random sampling runs before optimization starts
